% Generated by roxygen2 (4.0.2): do not edit by hand
\name{maximize}
\alias{fftm.maximize}
\alias{maximize}
\title{Maximizes a \code{\link{Sdt}} value}
\usage{
fftm.maximize(tree, whatToMaximize, savebest = 1, cluster = NULL,
  cores = 1)
}
\arguments{
\item{tree}{\code{\link{fftree}}}

\item{whatToMaximize}{string; Which parameter of the tree should be maximized? See \link{Sdt} for possible values.}

\item{savebest}{numeric; How big should the returning list be? If set to '100', the 'Top 100' of maximized cues will be returned.}

\item{cluster}{If you have a HPC cluster, specifiy configuration here. See \code{\link{makeCluster}} from \code{snow} package.}

\item{cores}{If multithreading is wanted (recommended for bigger computations!), you can specify your cores here.}
}
\value{
List with best cues
}
\description{
Takes given \code{\link{fftree}}, and permutates given \code{\link{cue}s} in all possible variants
to find a permutation of cues, which has the highest value of \code{whatToMaximize}.
Maximize is similar to bruteforce, but much smarter. Still: Be careful: This may take a LONG while!
}
\details{
This is a bruteforce- variant, to maximize one of \link{Sdt}s values. Normally one should use this method instead of \link{maximize}.
}
\examples{
rawdata <- fftm.Titanic.data()
tree <- Fftm(Survived ~ Age + Sex + Class, "maximize",rawdata, whatToMaximize = "percCorr", cores=4)
}
\seealso{
\code{\link{Fftm}}, \code{\link{bruteforcemaximize}}, \code{\link{chase}}, \code{\link{montecarlo}}
}

