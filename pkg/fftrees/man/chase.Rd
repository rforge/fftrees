% Generated by roxygen2 (4.0.2): do not edit by hand
\name{chase}
\alias{chase}
\alias{fftm.chase}
\title{Chases a \code{\link{Sdt}} value}
\usage{
fftm.chase(tree, whatToMaximize, chaseHow = "max", forward = TRUE)
}
\arguments{
\item{tree}{\code{\link{fftree}}}

\item{whatToMaximize}{stringvector; Which parameters of the tree should be chased? The index of the vector represents the sequence.  See \link{Sdt} for possible values.}

\item{chaseHow}{stringvector; Every item has to be either \code{max} or \code{min}.}

\item{forward}{OPTIONAL logicalvector: Should the next test be appended or prepended to the current tree? Default is \code{forward = TRUE}}
}
\value{
\code{\link{Fftree}}
}
\description{
Takes all \code{\link{cue}s} in \code{\link{fftree}} and builds a fftree from scratch,
by appending the 'next best' or prepending the 'previous best' cue according to given parameters. You can chase multiple parameters by
specifying an array of \code{whatToMaximize} and \code{chaseHow} like this: \code{whatToMaximize = c("dPr","percCorrect","crit")}, \code{chaseHow=c("max","max","min"))} and \code{forward=c(TRUE,TRUE,FALSE))}.
Use \code{\link{Fftm}} instead of calling this method directly.
}
\details{
You can chase all values of \code{\link{Sdt}} and \code{\link{getCueEfficiency}}
}
\examples{
rawdata <- fftm.Titanic.data()
tree <- Fftm(Survived ~ Age, "chase",rawdata, whatToMaximize = "percCorr", chaseHow = "max", forward=TRUE)
tree2 <- Fftm(Survived ~ Age, "chase",rawdata, whatToMaximize = c("percCorr","dPr"), chaseHow = c("max","min"), forward=c(TRUE,FALSE))
}
\seealso{
\code{\link{Fftm}}, \code{\link{bruteforcemaximize}}, \code{\link{chase}}, \code{\link{montecarlo}}, \code{\link{getCueEfficiency}}, \code{\link{Sdt}}
}

